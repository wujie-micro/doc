import{_ as a,c as o,N as t,o as l}from"./chunks/framework.7db8a257.js";const h=JSON.parse('{"title":"生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"guide/lifecycle.md","lastUpdated":1661566413000}'),r={name:"guide/lifecycle.md"};function i(d,e,n,c,u,p){return l(),o("div",null,e[0]||(e[0]=[t('<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">提示</p><p>无界提供一整套的生命周期钩子供开发者调用</p></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>如果子应用没有做<a href="/doc/guide/start.html#生命周期改造">生命周期的改造</a>，那么 beforeMount、afterMount、beforeUnmount、afterUnmount 这四个生命周期将不会调用</p></div><h2 id="beforeload" tabindex="-1">beforeLoad <a class="header-anchor" href="#beforeload" aria-label="Permalink to &quot;beforeLoad&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用开始加载静态资源前触发</p><h2 id="beforemount" tabindex="-1">beforeMount <a class="header-anchor" href="#beforemount" aria-label="Permalink to &quot;beforeMount&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用渲染（调用<code>window.__WUJIE_MOUNT</code>）前触发</p><h2 id="aftermount" tabindex="-1">afterMount <a class="header-anchor" href="#aftermount" aria-label="Permalink to &quot;afterMount&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用渲染（调用<code>window.__WUJIE_MOUNT</code>）后触发</p><h2 id="beforeunmount" tabindex="-1">beforeUnmount <a class="header-anchor" href="#beforeunmount" aria-label="Permalink to &quot;beforeUnmount&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用卸载（调用<code>window.__WUJIE_UNMOUNT</code>）前触发</p><h2 id="afterunmount" tabindex="-1">afterUnmount <a class="header-anchor" href="#afterunmount" aria-label="Permalink to &quot;afterUnmount&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用卸载（调用<code>window.__WUJIE_UNMOUNT</code>）后触发</p><h2 id="activated" tabindex="-1">activated <a class="header-anchor" href="#activated" aria-label="Permalink to &quot;activated&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用<a href="/doc/api/startApp.html#alive">保活模式</a>下，进入时触发</p><h2 id="deactivated" tabindex="-1">deactivated <a class="header-anchor" href="#deactivated" aria-label="Permalink to &quot;deactivated&quot;">​</a></h2><ul><li>类型： <code>type lifecycle = (appWindow: Window) =&gt; any;</code></li></ul><p>子应用<a href="/doc/api/startApp.html#alive">保活模式</a>下，离开时触发</p><h2 id="loaderror" tabindex="-1">loadError <a class="header-anchor" href="#loaderror" aria-label="Permalink to &quot;loadError&quot;">​</a></h2><ul><li>类型： <code>type loadErrorHandler = (url: string, e: Error) =&gt; any;</code></li></ul><p>子应用加载资源失败后触发</p>',27)]))}const s=a(r,[["render",i]]);export{h as __pageData,s as default};
