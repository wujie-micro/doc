import{_ as o,c,N as d,o as t}from"./chunks/framework.bc0ac4f7.js";const u=JSON.parse('{"title":"微前端是什么","description":"","frontmatter":{"sidebarDepth":2},"headers":[],"relativePath":"guide/index.md","lastUpdated":1672987987000}'),i={name:"guide/index.md"};function l(s,e,r,a,p,n){return t(),c("div",null,e[0]||(e[0]=[d('<h1 id="微前端是什么" tabindex="-1">微前端是什么 <a class="header-anchor" href="#微前端是什么" aria-label="Permalink to &quot;微前端是什么&quot;">​</a></h1><p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p><div class="tip custom-block"><p class="custom-block-title">引用</p><p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- <a href="https://micro-frontends.org/" target="_blank" rel="noreferrer">Micro Frontends</a></p></div><p>通俗来说，就是在一个<code>web</code>应用中可以独立的运行另一个<code>web</code>应用</p><p>微前端有什么使用场景呢？</p><div class="tip custom-block"><p class="custom-block-title">举例</p><ul><li><p>比如制作一个企业管理平台，把已有的采购系统和财务系统统一接入这个平台；</p></li><li><p>比如有一个巨大的应用，为了降低开发和维护成本，分拆成多个小应用进行开发和部署，然后用一个平台将这些小应用集成起来；</p></li><li><p>又比如一个应用使用<code>vue</code>框架开发，其中有一个比较独立的模块，开发者想尝试使用<code>react</code>框架来开发，等模块单独开发部署完，再把这个模块应用接回去</p></li></ul></div><p>一个完善的的微前端框架应该具备哪些能力呢？</p><div class="tip custom-block"><p class="custom-block-title">能力</p><ul><li><p><strong>子应用的加载和卸载能力</strong></p><p>页面需要从一个子应用切换到另一个子应用，框架必须具备加载、渲染、切换的能力</p></li><li><p><strong>子应用独立运行的能力</strong></p><p>子应用运行会污染全局的 window 对象，样式会污染其他应用，必须有效的隔离起来</p></li><li><p><strong>子应用路由状态保持能力</strong></p><p>激活子应用后，浏览器刷新、前进、后退子应用的路由都应该可以正常工作</p></li><li><p><strong>应用间通信的能力</strong></p><p>应用间可以方便、快捷的通信</p></li></ul></div><p>使用微前端有什么收益呢？(<a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noreferrer">@reference 乾坤</a>)</p><div class="tip custom-block"><p class="custom-block-title">收益</p><ul><li><p><strong>技术栈无关</strong></p><p>主框架不限制接入应用的技术栈，微应用具备完全自主权</p></li><li><p><strong>独立开发、独立部署</strong></p><p>微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</p></li><li><p><strong>增量升级</strong></p><p>在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</p></li><li><p><strong>独立运行时</strong></p><p>每个微应用之间状态隔离，运行时状态不共享</p></li></ul></div><p>可能有人会有疑问直接使用<code>iframe</code>不就可以做到吗？</p><h2 id="iframe-方案" tabindex="-1">iframe 方案 <a class="header-anchor" href="#iframe-方案" aria-label="Permalink to &quot;iframe 方案&quot;">​</a></h2><p>采用<code>iframe</code>的方案确实可以做到，而且优点非常明显</p><div class="tip custom-block"><p class="custom-block-title">优点</p><ul><li>非常简单，使用没有任何心智负担</li><li><code>web</code>应用隔离的非常完美，无论是<code>js</code>、<code>css</code>、<code>dom</code>都完全隔离开来</li></ul></div><p>由于其<strong>隔离的太完美</strong>导致缺点也非常明显</p><div class="danger custom-block"><p class="custom-block-title">缺点</p><ul><li>路由状态丢失，刷新一下，<code>iframe</code>的<code>url</code>状态就丢失了</li><li><code>dom</code>割裂严重，弹窗只能在<code>iframe</code>内部展示，无法覆盖全局</li><li><code>web</code>应用之间通信非常困难</li><li>每次打开白屏时间太长，对于<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8" target="_blank" rel="noreferrer">SPA 应用</a>来说无法接受</li></ul></div><h2 id="single-spa-方案" tabindex="-1">single-spa 方案 <a class="header-anchor" href="#single-spa-方案" aria-label="Permalink to &quot;single-spa 方案&quot;">​</a></h2><p><a href="https://zh-hans.single-spa.js.org/docs/getting-started-overview" target="_blank" rel="noreferrer">single-spa</a>是一个目前主流的微前端技术方案，其主要实现思路：</p><ul><li>预先注册子应用(激活路由、子应用资源、生命周期函数)</li><li>监听路由的变化，匹配到了激活的路由则加载子应用资源，顺序调用生命周期函数并最终渲染到容器</li></ul><p><a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noreferrer">乾坤</a>微前端架构则进一步对<code>single-spa</code>方案进行完善，主要的完善点：</p><ul><li>子应用资源由 js 列表修改进为一个<code>url</code>，大大减轻注册子应用的复杂度</li><li>实现应用隔离，完成<code>js</code>隔离方案 <em>（<code>window</code>工厂）</em> 和<code>css</code>隔离方案 <em>（类<code>vue</code>的<code>scoped</code>）</em></li><li>增加资源预加载能力，预先子应用<code>html</code>、<code>js</code>、<code>css</code>资源缓存下来，加快子应用的打开速度</li></ul><p>总结一下方案的优缺点：</p><div class="tip custom-block"><p class="custom-block-title">优点</p><ul><li>监听路由自动的加载、卸载当前路由对应的子应用</li><li>完备的沙箱方案，<code>js</code>沙箱做了<code>SnapshotSandbox</code>、<code>LegacySandbox</code>、<code>ProxySandbox</code>三套渐进增强方案，<code>css</code>沙箱做了两套<code>strictStyleIsolation</code>、<code>experimentalStyleIsolation</code>两套适用不同场景的方案</li><li>路由保持，浏览器刷新、前进、后退，都可以作用到子应用</li><li>应用间通信简单，全局注入</li></ul></div><div class="danger custom-block"><p class="custom-block-title">缺点</p><ul><li>基于路由匹配，无法同时激活多个子应用，也不支持子应用保活</li><li>改造成本较大，从 <code>webpack</code>、代码、路由等等都要做一系列的适配</li><li><code>css</code> 沙箱无法绝对的隔离，<code>js</code> 沙箱在某些场景下执行性能下降严重</li><li>无法支持 <code>vite</code> 等 <code>ESM</code> 脚本运行</li></ul></div><h2 id="无界方案" tabindex="-1">无界方案 <a class="header-anchor" href="#无界方案" aria-label="Permalink to &quot;无界方案&quot;">​</a></h2><p>在乾坤的<code>issue</code>中一个<a href="https://github.com/umijs/qiankun/issues/286" target="_blank" rel="noreferrer">议题</a>非常有意思，有个开发者提出能否利用<code>iframe</code>来实现<code>js</code>沙箱能力，这个<code>idea</code>启发了无界方案，下面详细介绍</p><h3 id="应用加载机制和-js-沙箱机制" tabindex="-1">应用加载机制和 js 沙箱机制 <a class="header-anchor" href="#应用加载机制和-js-沙箱机制" aria-label="Permalink to &quot;应用加载机制和 js 沙箱机制&quot;">​</a></h3><p>将子应用的<code>js</code>注入主应用同域的<code>iframe</code>中运行，<code>iframe</code>是一个原生的<code>window</code>沙箱，内部有完整的<code>history</code>和<code>location</code>接口，子应用实例<code>instance</code>运行在<code>iframe</code>中，路由也彻底和主应用解耦，可以直接在业务组件里面启动应用。</p><p>采用这种方式我们可以获得</p><div class="tip custom-block"><p class="custom-block-title">收益</p><ul><li><p><strong>组件方式来使用微前端</strong></p><p>不用注册，不用改造路由，直接使用无界组件，化繁为简</p></li><li><p><strong>一个页面可以同时激活多个子应用</strong></p><p>子应用采用 iframe 的路由，不用关心路由占用的问题</p></li><li><p><strong>天然 js 沙箱，不会污染主应用环境</strong></p><p>不用修改主应用<code>window</code>任何属性，只在<code>iframe</code>内部进行修改</p></li><li><p><strong>应用切换没有清理成本</strong></p><p>由于不污染主应用，子应用销毁也无需做任何清理工作</p></li></ul></div><h3 id="路由同步机制" tabindex="-1">路由同步机制 <a class="header-anchor" href="#路由同步机制" aria-label="Permalink to &quot;路由同步机制&quot;">​</a></h3><p>在<code>iframe</code>内部进行<code>history.pushState</code>，浏览器会自动的在<a href="https://html.spec.whatwg.org/multipage/history.html#joint-session-history" target="_blank" rel="noreferrer">joint session history</a>中添加<code>iframe</code>的<a href="https://html.spec.whatwg.org/multipage/history.html#session-history" target="_blank" rel="noreferrer">session-history</a>，浏览器的前进、后退在不做任何处理的情况就可以直接作用于子应用</p><p>劫持<code>iframe</code>的<code>history.pushState</code>和<code>history.replaceState</code>，就可以将子应用的<code>url</code>同步到主应用的<code>query</code>参数上，当刷新浏览器初始化<code>iframe</code>时，读回子应用的<code>url</code>并使用<code>iframe</code>的<code>history.replaceState</code>进行同步</p><p>采用这种方式我们可以获得</p><div class="tip custom-block"><p class="custom-block-title">收益</p><ul><li><strong>浏览器刷新、前进、后退都可以作用到子应用</strong></li><li><strong>实现成本低，无需复杂的监听来处理同步问题</strong></li><li><strong>多应用同时激活时也能保持路由同步</strong></li></ul></div><h3 id="iframe-连接机制和-css-沙箱机制" tabindex="-1">iframe 连接机制和 css 沙箱机制 <a class="header-anchor" href="#iframe-连接机制和-css-沙箱机制" aria-label="Permalink to &quot;iframe 连接机制和 css 沙箱机制&quot;">​</a></h3><p>无界采用<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noreferrer">webcomponent</a>来实现页面的样式隔离，无界会创建一个<code>wujie</code>自定义元素，然后将子应用的完整结构渲染在内部</p><p>子应用的实例<code>instance</code>在<code>iframe</code>内运行，<code>dom</code>在主应用容器下的<code>webcomponent</code>内，通过代理 <code>iframe</code>的<code>document</code>到<code>webcomponent</code>，可以实现两者的互联。</p><p>将<code>document</code>的查询类接口：<code>getElementsByTagName、getElementsByClassName、getElementsByName、getElementById、querySelector、querySelectorAll、head、body</code>全部代理到<code>webcomponent</code>，这样<code>instance</code>和<code>webcomponent</code>就精准的链接起来。</p><p>当子应用发生切换，<code>iframe</code>保留下来，子应用的容器可能销毁，但<code>webcomponent</code>依然可以选择保留，这样等应用切换回来将<code>webcomponent</code>再挂载回容器上，子应用可以获得类似<code>vue</code>的<code>keep-alive</code>的能力.</p><p>采用这种方式我们可以获得</p><div class="tip custom-block"><p class="custom-block-title">收益</p><ul><li><p><strong>天然 css 沙箱</strong></p><p>直接物理隔离，样式隔离子应用不用做任何修改</p></li><li><p><strong>天然适配弹窗问题</strong></p><p><code>document.body</code>的<code>appendChild</code>或者<code>insertBefore</code>会代理直接插入到<code>webcomponent</code>，子应用不用做任何改造</p></li><li><p><strong>子应用保活</strong></p><p>子应用保留<code>iframe</code>和<code>webcomponent</code>，应用内部的<code>state</code>不会丢失</p></li><li><p><strong>完整的 DOM 结构</strong></p><p><code>webcomponent</code>保留了子应用完整的<code>html</code>结构，样式和结构完全对应，子应用不用做任何修改</p></li></ul></div><h3 id="通信机制" tabindex="-1">通信机制 <a class="header-anchor" href="#通信机制" aria-label="Permalink to &quot;通信机制&quot;">​</a></h3><p>承载子应用的<code>iframe</code>和主应用是同域的，所以主、子应用天然就可以很好的进行通信，在无界我们提供三种通信方式</p><ul><li><strong>props 注入机制</strong></li></ul><p>子应用通过<code>$wujie.props</code>可以轻松拿到主应用注入的数据</p><ul><li><strong>window.parent 通信机制</strong></li></ul><p>子应用<code>iframe</code>沙箱和主应用同源，子应用可以直接通过<code>window.parent</code>和主应用通信</p><ul><li><strong>去中心化的通信机制</strong></li></ul><p>无界提供了<code>EventBus</code>实例，注入到主应用和子应用，所有的应用可以去中心化的进行通信</p><h3 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h3><p>通过上面原理的阐述，我们可以得出无界微前端框架的几点优势：</p><div class="tip custom-block"><p class="custom-block-title">优势</p><ul><li><p><strong>多应用同时激活在线</strong></p><p>框架具备同时激活多应用，并保持这些应用路由同步的能力</p></li><li><p><strong>组件式的使用方式</strong></p><p>无需注册，更无需路由适配，在组件内使用，跟随组件装载、卸载</p></li><li><p><strong>应用级别的 keep-alive</strong></p><p>子应用开启<a href="/doc/api/startApp.html#alive">保活模式</a>后，应用发生切换时整个子应用的状态可以保存下来不丢失，结合<a href="/doc/api/preloadApp.html#exec">预执行模式</a>可以获得类似<code>ssr</code>的打开体验</p></li><li><p><strong>纯净无污染</strong></p><ul><li>无界利用<code>iframe</code>和<code>webcomponent</code>来搭建天然的<code>js</code>隔离沙箱和<code>css</code>隔离沙箱</li><li>利用<code>iframe</code>的<code>history</code>和主应用的<code>history</code>在同一个<a href="https://html.spec.whatwg.org/multipage/browsers.html#top-level-browsing-context" target="_blank" rel="noreferrer">top-level browsing context</a>来搭建天然的路由同步机制</li><li>副作用局限在沙箱内部，子应用切换无需任何清理工作，没有额外的切换成本</li></ul></li><li><p><strong>性能和体积兼具</strong></p><ul><li>子应用执行性能和原生一致，子应用实例<code>instance</code>运行在<code>iframe</code>的<code>window</code>上下文中，避免<code>with(proxyWindow){code}</code>这样指定代码执行上下文导致的性能下降，但是多了实例化<code>iframe</code>的一次性的开销，可以通过 <a href="/doc/api/preloadApp.html">preload</a> 提前实例化</li><li>体积比较轻量，借助<code>iframe</code>和<code>webcomponent</code>来实现沙箱，有效的减小了代码量</li></ul></li><li><p><strong>开箱即用</strong></p><p>不管是样式的兼容、路由的处理、弹窗的处理、热更新的加载，子应用完成接入即可开箱即用无需额外处理，应用<a href="./start.html#子应用改造">接入成本</a>也极低</p></li></ul></div>',53)]))}const h=o(i,[["render",l]]);export{u as __pageData,h as default};
